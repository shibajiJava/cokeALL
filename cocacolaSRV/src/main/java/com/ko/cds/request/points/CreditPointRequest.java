package com.ko.cds.request.points;

import java.io.Serializable;
import java.math.BigInteger;

import net.sf.oval.constraint.MatchPattern;
import net.sf.oval.constraint.MaxLength;
import net.sf.oval.constraint.Min;
import net.sf.oval.constraint.NotNull;
/***
 * This class capture request data for Point Credit API.
 * @author IBM
 *
 */

public class CreditPointRequest implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 4382194521446387443L;
	@MaxLength(value=36,message="points.credit.violation")
	/** Unique session ID created by TCCC **/
	private String sessionUUID;
	@NotNull(message="points.credit.violation")
	/**Unique Id for the member generated by CDS**/
	private BigInteger memberId;
	@MaxLength(value=10,message="points.credit.violation")
	@NotNull(message="points.credit.violation")
	/**The Account type that is being debited and credited**/
	private String accountType;
	
	@Min(value=0,message="points.credit.violation")
    @NotNull(message="points.credit.violation")
	/**The amount of points that will be debited and credited**/
	private int pointsQuantity;
    @MaxLength(value=10,message="points.credit.violation")
    /** source_cd - Name of the application because of which the transaction is being called (Example: Bunchball, MixedCodes, Interact)**/
	private String pointsSource;
    @MaxLength(value=20,message="points.credit.violation")
    @NotNull(message="points.credit.violation")
	/**The reason code for the transaction**/
	private String reasonCode;
    @MaxLength(value=10,message="points.credit.violation")
    @NotNull(message="points.credit.violation")
    @MatchPattern(pattern = "Regular|Admin|Bonus", message = "points.credit.violation")
	/** Point Type Code-credit type -“Regular”, “Admin” or “Bonus” points will be placed here**/
	private String creditType;
    /**The related transaction ID that will be included for tracking multiple CDS transactions **/
	private BigInteger relatedTransactionId;
    @MaxLength(value=36,message="points.credit.violation")
	/**If multiple clientTransactionIDs are submitted then only the first transaction will be accepted and all other transactions matching the clientTransactionID will fail*/
	private String clientTransactionId;
    @MaxLength(value=10,message="points.credit.violation")
	/** brand_cd -Records the added brand detail */
	private String productId;
    @MaxLength(value=255,message="points.credit.violation")	
	/**Program_id Include the promotion variable for the name of the promotion**/
	private String promotion;
    @MaxLength(value=50,message = "points.credit.violation")	
    /**Unique stakeHolderId **/
	private String stakeHolder;
    /**Brand Id for storing brand level information*/
    @MaxLength(value=10,message = "points.credit.violation")
    private String brandId;

	public String getSessionUUID() {
		return sessionUUID;
	}

	public void setSessionUUID(String sessionUUID) {
		this.sessionUUID = sessionUUID;
	}

	public BigInteger getMemberId() {
		return memberId;
	}

	public void setMemberId(BigInteger memberId) {
		this.memberId = memberId;
	}

	public String getAccountType() {
		return accountType;
	}

	public void setAccountType(String accountType) {
		this.accountType = accountType;
	}

	public int getPointsQuantity() {
		return pointsQuantity;
	}
	public String getPointsSource() {
		return pointsSource;
	}

	public void setPointsSource(String pointsSource) {
		this.pointsSource = pointsSource;
	}

	public String getReasonCode() {
		return reasonCode;
	}

	public void setReasonCode(String reasonCode) {
		this.reasonCode = reasonCode;
	}

	public String getCreditType() {
		return creditType;
	}

	public void setCreditType(String creditType) {
		this.creditType = creditType;
	}

	

	public void setRelatedTransactionId(BigInteger relatedTransactionId) {
		this.relatedTransactionId = relatedTransactionId;
	}

	public String getClientTransactionId() {
		return clientTransactionId;
	}

	public void setClientTransactionId(String clientTransactionId) {
		this.clientTransactionId = clientTransactionId;
	}

	public String getProductId() {
		return productId;
	}

	public void setProductId(String productId) {
		this.productId = productId;
	}

	public String getPromotion() {
		return promotion;
	}

	public void setPromotion(String promotion) {
		this.promotion = promotion;
	}

	public String getStakeHolder() {
		return stakeHolder;
	}

	public void setStakeHolder(String stakeHolder) {
		this.stakeHolder = stakeHolder;
	}

	public String getBrandId() {
		return brandId;
	}

	public void setBrandId(String brandId) {
		this.brandId = brandId;
	}

	public BigInteger getRelatedTransactionId() {
		return relatedTransactionId;
	}

	public void setPointsQuantity(int pointsQuantity) {
		this.pointsQuantity = pointsQuantity;
	}

	@Override
	public String toString() {
		return "CreditPointRequest [sessionUUID=" + sessionUUID + ", memberId="
				+ memberId + ", accountType=" + accountType
				+ ", pointsQuantity=" + pointsQuantity + ", pointsSource="
				+ pointsSource + ", reasonCode=" + reasonCode + ", creditType="
				+ creditType + ", relatedTransactionId=" + relatedTransactionId
				+ ", clientTransactionId=" + clientTransactionId
				+ ", productId=" + productId + ", promotion=" + promotion
				+ ", stakeHolder=" + stakeHolder + ", brandId=" + brandId + "]";
	}
	public String toJson() {
		StringBuffer creditJson = new StringBuffer();
				creditJson.append("{\"sessionUUID\":\"" + sessionUUID + "\", \"memberId\":"
				+ memberId + ", \"accountType\":\"" + accountType
				+ "\", \"pointsQuantity\":" + pointsQuantity + ", \"pointsSource\":\""
				+ pointsSource + "\", \"reasonCode\":\"" + reasonCode + "\", \"creditType\":\""
				+ creditType 
				+ "\", \"productId\":\"" + productId + "\", \"promotion\":\"" + promotion
				+ "\",\"stakeHolder\":\"" + stakeHolder + "\", \"brandId\":\"" + brandId);
				System.out.println(clientTransactionId);
		if(clientTransactionId != null){
			creditJson.append("\", \"clientTransactionId\":\"" + clientTransactionId+ "\"}");
		}else{
			creditJson.append("\"}");
		}
		return creditJson.toString();
	}
	
	
}

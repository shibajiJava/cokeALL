package com.ko.cds.request.points;

import java.io.Serializable;
import java.math.BigInteger;

import net.sf.oval.constraint.MatchPattern;
import net.sf.oval.constraint.Max;
import net.sf.oval.constraint.MaxLength;
import net.sf.oval.constraint.Min;
import net.sf.oval.constraint.NotNull;

public class DebitPointRequest implements Serializable{

	/**
	 * 
	 */
	private static final long serialVersionUID = -8190471685082056707L;
	@MaxLength(value=36,message = "points.debit.violation")
	/** Unique session ID created by TCCC **/
	private String sessionUUID;
	@NotNull(message="points.debit.violation")
	/**Unique Id for the member generated by CDS**/
	private BigInteger memberId;
	@MaxLength(value=10,message = "points.debit.violation")
	@NotNull(message="points.debit.violation")
	/**The Account type that is being debited and credited**/
	private String accountType;
	
	@Min(value=0,message = "points.debit.violation")
    @NotNull(message="points.debit.violation")
	/**The amount of points that will be debited and credited**/
	private int pointsQuantity;
    @MaxLength(value=10,message = "points.debit.violation")
    /** source_cd - Name of the application because of which the transaction is being called (Example: Bunchball, MixedCodes, Interact)**/
	private String pointsSource;
    @MaxLength(value=20,message = "points.debit.violation")
    @NotNull(message="points.debit.violation")
	/**The reason code for the transaction**/
	private String reasonCode;
    @MaxLength(value=10)
    @NotNull(message="points.debit.violation")
    @MatchPattern(pattern = "Regular|Hold|Confirm", message = "points.debit.violation")
	/** Point Type Code-debitType -“Hold”, “Confirm” or “Regular” points will be placed here**/
	private String debitType;
    /**The related transaction ID that will be included for tracking multiple CDS transactions **/
	private BigInteger relatedTransactionId;
    @MaxLength(value=36,message = "points.debit.violation")
	/**If multiple clientTransactionIDs are submitted then only the first transaction will be accepted and all other transactions matching the clientTransactionID will fail*/
	private String clientTransactionId;
    @MaxLength(value=10,message = "points.debit.violation")
	/** brand_cd -Records the added brand detail */
	private String productId;
    @MaxLength(value=255,message = "points.debit.violation")	
	/**Promotion_id Include the promotion variable for the name of the promotion**/
	private String promotion;
    @MaxLength(value=50,message = "points.debit.violation")	
    /**Unique stakeHolderId **/
	private String stakeHolder;
	/**itemID-HelloWorld Item that is can be saved for a debit*/
	@MaxLength(value=10,message = "points.debit.violation")
	private Integer itemId;
	/**This debit is held for X seconds and will then be rolled back unless a “relatedTransactionID” has a confirm transaction. Maximum for this field is 240 seconds. */
	@Max(value=240,message = "points.debit.violation")
	private Integer holdTime;
	/**Brand Id for storing brand level information*/
    @MaxLength(value=10,message = "points.debit.violation")
    private String brandId;
	
	public String getPromotion() {
		return promotion;
	}
	public void setPromotion(String promotion) {
		this.promotion = promotion;
	}
	public String getStakeHolder() {
		return stakeHolder;
	}
	public void setStakeHolder(String stakeHolder) {
		this.stakeHolder = stakeHolder;
	}
	public String getSessionUUID() {
		return sessionUUID;
	}
	public void setSessionUUID(String sessionUUID) {
		this.sessionUUID = sessionUUID;
	}
	public BigInteger getMemberId() {
		return memberId;
	}
	public void setMemberId(BigInteger memberId) {
		this.memberId = memberId;
	}
	public String getAccountType() {
		return accountType;
	}
	public void setAccountType(String accountType) {
		this.accountType = accountType;
	}
	public int getPointsQuantity() {
		return pointsQuantity;
	}
	public void setPointsQuantity(int pointsQuantity) {
		this.pointsQuantity = pointsQuantity;
	}
	public String getPointsSource() {
		return pointsSource;
	}
	public void setPointsSource(String pointsSource) {
		this.pointsSource = pointsSource;
	}
	public String getReasonCode() {
		return reasonCode;
	}
	public void setReasonCode(String reasonCode) {
		this.reasonCode = reasonCode;
	}
	public String getDebitType() {
		return debitType;
	}
	public void setDebitType(String debitType) {
		this.debitType = debitType;
	}
	public BigInteger getRelatedTransactionId() {
		return relatedTransactionId;
	}
	public void setRelatedTransactionId(BigInteger relatedTransactionId) {
		this.relatedTransactionId = relatedTransactionId;
	}
	public String getClientTransactionId() {
		return clientTransactionId;
	}
	public void setClientTransactionId(String clientTransactionId) {
		this.clientTransactionId = clientTransactionId;
	}
	public String getProductId() {
		return productId;
	}
	public void setProductId(String productId) {
		this.productId = productId;
	}
	
	public Integer getItemId() {
		return itemId;
	}
	public void setItemId(Integer itemId) {
		this.itemId = itemId;
	}
	public Integer getHoldTime() {
		return holdTime;
	}
	public void setHoldTime(Integer holdTime) {
		this.holdTime = holdTime;
	}
	public String getBrandId() {
		return brandId;
	}
	public void setBrandId(String brandId) {
		this.brandId = brandId;
	} 
	
    
}

package com.ko.cds.request.csr;

import java.math.BigInteger;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

import javax.ws.rs.QueryParam;

import net.sf.oval.constraint.MaxLength;

import org.codehaus.jackson.map.annotate.JsonDeserialize;

import com.ko.cds.utils.CustomTimestampDeserializer;

/**
 * Pojo Object to Capture the Code Redemption History Request
 * @author ibm
 *
 */
public class CodeRedemptionHistoryRequest{

	@QueryParam("sessionUUID")
	@MaxLength(value = 36)
	/** The unique session ID */
	private String sessionUUID;
	
	@QueryParam("memberId")
	/**Unique Id for the member generated by CDS*/
	private BigInteger	memberId;
	
	@QueryParam("lotId")
	private BigInteger	lotId;
	
	@QueryParam("campaigned")
	private BigInteger 	campaigned;
	
	@QueryParam("searchClientTransactionId")
	private String 	searchClientTransactionId;
	
	@QueryParam("redemptionHistoryStartDate")
	private String 	redemptionHistoryStartDate;
	
	@QueryParam("redemptionHistoryEndDate")
	private String 	redemptionHistoryEndDate;
	
	public String getSessionUUID() {
		return sessionUUID;
	}
	public void setSessionUUID(String sessionUUID) {
		this.sessionUUID = sessionUUID;
	}
	public BigInteger getMemberId() {
		return memberId;
	}
	public void setMemberId(BigInteger memberId) {
		this.memberId = memberId;
	}
	public BigInteger getLotId() {
		return lotId;
	}
	public void setLotId(BigInteger lotId) {
		this.lotId = lotId;
	}
	public BigInteger getCampaigned() {
		return campaigned;
	}
	public void setCampaigned(BigInteger campaigned) {
		this.campaigned = campaigned;
	}
	public String getSearchClientTransactionId() {
		return searchClientTransactionId;
	}
	public void setSearchClientTransactionId( String searchClientTransactionId) {
		this.searchClientTransactionId = searchClientTransactionId;
	}
	public String getRedemptionHistoryStartDate() {
		if (redemptionHistoryStartDate != null && redemptionHistoryStartDate.contains("T")) {
			SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");		
			try {
				Date date1 = format.parse(this.redemptionHistoryStartDate);
				format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
				String outputDate = format.format(date1).toString();
				this.redemptionHistoryStartDate = outputDate;
			} catch (ParseException e) {
				throw new RuntimeException(e);
			}
		}
		
		return this.redemptionHistoryStartDate;
	}
	
	public void setRedemptionHistoryStartDate(@JsonDeserialize(using = CustomTimestampDeserializer.class) String redemptionHistoryStartDate) {
			this.redemptionHistoryStartDate = redemptionHistoryStartDate;
	}

	public String getRedemptionHistoryEndDate() {
		if(redemptionHistoryEndDate != null && redemptionHistoryEndDate.contains("T")){
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss.SSS'Z'");		
		try {
			Date date1 = format.parse(this.redemptionHistoryEndDate);
			format = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS");
			String outputDate = format.format(date1).toString();
			this.redemptionHistoryEndDate = outputDate;
		} catch (ParseException e) {
			throw new RuntimeException(e);
		}
		}
		return this.redemptionHistoryEndDate;
	}
	
	public void setRedemptionHistoryEndDate(String redemptionHistoryEndDate) {
			this.redemptionHistoryEndDate = redemptionHistoryEndDate;
	}

	@Override
	public String toString() {
		return "CodeRedemptionHistoryRequest [sessionUUID=" + sessionUUID
				+ ", memberId=" + memberId + ", lotId=" + lotId
				+ ", campaigned=" + campaigned + ", searchClientTransactionId="
				+ searchClientTransactionId + ", redemptionHistoryStartDate="
				+ redemptionHistoryStartDate + ", redemptionHistoryEndDate="
				+ redemptionHistoryEndDate + "]";
	}
	

}

<?xml version="1.0" encoding="UTF-8"?>

<!--  its a Production Configuration file -->
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jdbc="http://www.springframework.org/schema/jdbc"
    xmlns:cache="http://www.springframework.org/schema/cache"
    xmlns:jee="http://www.springframework.org/schema/jee"
    xmlns:p="http://www.springframework.org/schema/p"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd 
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.0.xsd
     	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/cache http://www.springframework.org/schema/cache/spring-cache.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
		 http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-3.2.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- mbean export  -->
	<context:mbean-export /> 
	<beans:bean id="jmxConfigurationProperty" class="com.ko.cds.jmxImpl.JmxConfigurationProperty"/>
<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />
	 <context:property-placeholder location="classpath:resources/junit/jdbc.properties,classpath:resources/junit/mybatis.properties" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.ibm.app.services.ws" />
	<context:component-scan base-package="com.ibm.app.services.util" />
	<context:component-scan base-package="com.ibm.app.services.exception" />
	<context:component-scan base-package="com.ibm.app.services.parsistant" />
	<!--
	<context:component-scan base-package="com.ibm.app.services.domain" />
	<context:component-scan base-package="com.ibm.app.services.ws.impl" />
	-->
	<context:component-scan base-package="com.ko.cds" />
	<context:component-scan base-package="com.ibm.app.services.aspectServices" />
	
	
	<mvc:interceptors>
    	<beans:bean class="com.ibm.app.services.interceptor.RESTHandlerInterceptor"/>
	</mvc:interceptors>
	
	
	
	
	<beans:bean id="applicationContextProvider" class="com.ibm.app.services.appcontext.ApplicationContextProvider"></beans:bean>
	
	
	  <!-- ***************************************************************************** -->
	<!-- quartz -->
		
	 <!-- <beans:bean id="debitedPointCreditHelper" class="com.ko.cds.sch.rollbackpoints.DebitedPointCreditHelper"></beans:bean> -->
	 
	    <beans:bean name="pointsRollbackQuartzJob" class="org.springframework.scheduling.quartz.JobDetailBean">
	          <beans:property name="jobClass" value="com.ko.cds.sch.rollbackpoints.DebitedPointsCreditQuartzJob" />
	         <beans:property name="jobDataAsMap">
	           <beans:map>
	             <beans:entry key="debitedPointCreditHelper" value="com.ko.cds.sch.rollbackpoints.DebitedPointCreditHelper" />
	          </beans:map>
	       </beans:property>
	    </beans:bean>
	  <!-- 
	    <beans:bean id="simpleTriggerForRollBackPoints" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	         <beans:property name="jobDetail" ref="pointsRollbackQuartzJob" />
	        <beans:property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT"/>
	         <beans:property name="repeatInterval" value="30000" /> run the job at an interval of 30sec
	         
        	 <beans:property name="startDelay" value="1000" />  start the scheduler with delay of 1 second after the main method is called.
	    </beans:bean -->
	     

	    

	     <beans:bean id="cronTriggerForRollBackPoints" class="org.springframework.scheduling.quartz.CronTriggerBean">
	         <beans:property name="jobDetail" ref="pointsRollbackQuartzJob" />
	         <beans:property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
	         <beans:property name="cronExpression" value="0/30 * * * * ?" />
	   </beans:bean> 
	  
	    <beans:bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	         <beans:property name="jobDetails">
	             <beans:list>
	                 <beans:ref bean="pointsRollbackQuartzJob" />
	            </beans:list>
	       </beans:property>
	         <beans:property name="triggers">
	             <beans:list>
	                 <beans:ref bean="cronTriggerForRollBackPoints" />
	             </beans:list>
	        </beans:property> 
	         
	        <beans:property name="dataSource" ref="dataSourceQuartz"/>
	        
	        <!-- Disabiling the Quartz update check feature -->
	        <beans:property name="quartzProperties">  
                <beans:props>   
            		<beans:prop key="org.quartz.scheduler.skipUpdateCheck">true</beans:prop> 
            		<beans:prop key="org.terracotta.quartz.skipUpdateCheck">true</beans:prop> 
            		<beans:prop key="net.sf.ehcache.util.UpdateChecker">true</beans:prop> 
            		<beans:prop key="org.quartz.scheduler.instanceName">DebitScheduler</beans:prop>
		            <beans:prop key="org.quartz.scheduler.instanceId">AUTO</beans:prop>
		            <beans:prop key="org.quartz.jobStore.misfireThreshold">60000</beans:prop>
		            
		            <beans:prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</beans:prop>
		            <beans:prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</beans:prop>
		            <beans:prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</beans:prop>
		            <beans:prop key="org.quartz.jobStore.tablePrefix">SCHED.QRTZ_</beans:prop>
		            <beans:prop key="org.quartz.jobStore.isClustered">true</beans:prop>		             
		            <beans:prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</beans:prop>
		            <beans:prop key="org.quartz.threadPool.threadCount">10</beans:prop>
		            <beans:prop key="org.quartz.threadPool.threadPriority">5</beans:prop>
		            <beans:prop key="org.quartz.scheduler.interruptJobsOnShutdownWithWait">true</beans:prop>
         		 </beans:props>  
     		</beans:property> 
	     </beans:bean>
	  
  <!-- ********************************************************************************************  -->
  
   <!-- Spring Quartz for janrain service -->
	<!--  <beans:bean name="janrainService" class="com.ko.cds.service.janrainIntegration.JanrainService"></beans:bean> -->
	
 <beans:bean name="janrainJobSchedularJob" class="org.springframework.scheduling.quartz.JobDetailBean">
		
		<beans:property name="jobClass" value="com.ko.cds.service.janrainIntegration.JanrainJobSchedularJob" />
		<beans:property name="jobDataAsMap">
			<beans:map>
				<beans:entry key="janrainService"  value="com.ko.cds.service.janrainIntegration.JanrainService" />
			</beans:map>
		</beans:property>
	</beans:bean>
	
	 
	<beans:bean id="janRainTrigger" class="org.springframework.scheduling.quartz.SimpleTriggerBean">

		<beans:property name="jobDetail"  ref="janrainJobSchedularJob" />
		<beans:property name="repeatInterval" value="60000" />
		<beans:property name="startDelay" value="1000" />

	</beans:bean>  

	<!-- Cron Trigger, run every 5 seconds -->
	 <beans:bean id="cronTrigger" class="org.springframework.scheduling.quartz.CronTriggerBean">

		<beans:property name="jobDetail" ref="janrainJobSchedularJob" />
		<beans:property name="cronExpression" value="0 0/1 * * * ?" />

	</beans:bean>

	<beans:bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
		<beans:property name="jobDetails">
			<beans:list>
				<beans:ref bean="janrainJobSchedularJob" />
			</beans:list>
		</beans:property>

		<beans:property name="triggers">
			<beans:list>
				<beans:ref bean="janRainTrigger" />
			</beans:list>
		</beans:property>
		
		 <beans:property name="dataSource" ref="dataSourceQuartz"/>
	        <!-- Disabiling the Quartz update check feature-->
	         <beans:property name="quartzProperties">  
                <beans:props>   
            		<beans:prop key="org.quartz.scheduler.skipUpdateCheck">true</beans:prop> 
            		<beans:prop key="org.terracotta.quartz.skipUpdateCheck">true</beans:prop> 
            		<beans:prop key="net.sf.ehcache.util.UpdateChecker">true</beans:prop> 
            		<beans:prop key="org.quartz.scheduler.instanceName">JanrainScheduler</beans:prop>
		            <beans:prop key="org.quartz.scheduler.instanceId">AUTO</beans:prop>
		            <beans:prop key="org.quartz.jobStore.misfireThreshold">60000</beans:prop>
		            <beans:prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</beans:prop>
		             <beans:prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</beans:prop>
		            <beans:prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</beans:prop>
		            <beans:prop key="org.quartz.jobStore.tablePrefix">SCHED.QRTZ_</beans:prop>
		            <beans:prop key="org.quartz.jobStore.isClustered">true</beans:prop> 
		            <beans:prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</beans:prop>
		            <beans:prop key="org.quartz.threadPool.threadCount">10</beans:prop>
		            <beans:prop key="org.quartz.threadPool.threadPriority">5</beans:prop>
		            <beans:prop key="org.quartz.scheduler.interruptJobsOnShutdownWithWait">true</beans:prop>
         		 </beans:props>  
     		</beans:property> 
	</beans:bean>  
	
	<!-- ***************************************************************************************************************************************  -->
			<!-- SAC schedular -->
	    <beans:bean name="creditSACPointsQuartzJob" class="org.springframework.scheduling.quartz.JobDetailBean">
	          <beans:property name="jobClass" value="com.ko.cds.sch.creditpoints.CreditSACPointsQuartzJob" />
	         <beans:property name="jobDataAsMap">
	           <beans:map>
	             <beans:entry key="creditSACPointsHelper" value="com.ko.cds.sch.creditpoints.CreditSACPointsHelper" />
	          </beans:map>
	       </beans:property>
	    </beans:bean>
    
    
	   <!--  <beans:bean id="simpleTriggerForCreditSACPoints" class="org.springframework.scheduling.quartz.SimpleTriggerBean">
	         <beans:property name="jobDetail" ref="creditSACPointsQuartzJob" />
	        <beans:property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_RESCHEDULE_NEXT_WITH_REMAINING_COUNT"/>
	         <beans:property name="repeatInterval" value="300000" /> 
	         
        	 <beans:property name="startDelay" value="1000" />  
	    </beans:bean> -->

	   <beans:bean id="cronTriggerForCreditSACPoints" class="org.springframework.scheduling.quartz.CronTriggerBean">
	         <beans:property name="jobDetail" ref="creditSACPointsQuartzJob" />
	         <beans:property name="misfireInstructionName" value="MISFIRE_INSTRUCTION_DO_NOTHING"/>
	         <beans:property name="cronExpression" value="0 30 23 * * ?" /> <!-- Running everyday 23:30 server time-->
	   </beans:bean>  
	  
	    <beans:bean class="org.springframework.scheduling.quartz.SchedulerFactoryBean">
	         <beans:property name="jobDetails">
	             <beans:list>
	                 <beans:ref bean="creditSACPointsQuartzJob" />
	            </beans:list>
	       </beans:property>
	         <beans:property name="triggers">
	             <beans:list>
	                 <beans:ref bean="cronTriggerForCreditSACPoints" />
	             </beans:list>
	        </beans:property> 
	         
	         <beans:property name="dataSource" ref="dataSourceQuartz"/>
	        <!-- Disabiling the Quartz update check feature-->
	         <beans:property name="quartzProperties">  
                <beans:props>   
            		<beans:prop key="org.quartz.scheduler.skipUpdateCheck">true</beans:prop> 
            		<beans:prop key="org.terracotta.quartz.skipUpdateCheck">true</beans:prop> 
            		<beans:prop key="net.sf.ehcache.util.UpdateChecker">true</beans:prop> 
            		<beans:prop key="org.quartz.scheduler.instanceName">SACScheduler</beans:prop>
		            <beans:prop key="org.quartz.scheduler.instanceId">AUTO</beans:prop>
		            <beans:prop key="org.quartz.jobStore.misfireThreshold">60000</beans:prop>
		            <beans:prop key="org.quartz.jobStore.class">org.quartz.simpl.RAMJobStore</beans:prop>
		             <beans:prop key="org.quartz.jobStore.class">org.quartz.impl.jdbcjobstore.JobStoreTX</beans:prop>
		            <beans:prop key="org.quartz.jobStore.driverDelegateClass">org.quartz.impl.jdbcjobstore.StdJDBCDelegate</beans:prop>
		            <beans:prop key="org.quartz.jobStore.tablePrefix">SCHED.QRTZ_</beans:prop>
		            <beans:prop key="org.quartz.jobStore.isClustered">true</beans:prop>
		            <beans:prop key="org.quartz.threadPool.class">org.quartz.simpl.SimpleThreadPool</beans:prop>
		            <beans:prop key="org.quartz.threadPool.threadCount">10</beans:prop>
		            <beans:prop key="org.quartz.threadPool.threadPriority">5</beans:prop>
		            <beans:prop key="org.quartz.scheduler.interruptJobsOnShutdownWithWait">true</beans:prop>
         		 </beans:props>  
     		</beans:property> 
	     </beans:bean>
	  
  <!-- ********************************************************************************************  -->
	<!-- Spring Quartz -->
  
  
	<!-- 
	<beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <beans:property name="driverClass" value="com.mysql.jdbc.Driver"/>
        <beans:property name="jdbcUrl" value="jdbc:mysql://localhost:3307/test1"/>      

        

        <beans:property name="user" value="root"/>
        <beans:property name="password" value="root"/> 

        <beans:property name="maxPoolSize" value="50"/>
        <beans:property name="initialPoolSize" value="5"/>
        <beans:property name="minPoolSize" value="1"/>
        <beans:property name="maxStatements" value="200"/>
        <beans:property name="acquireIncrement"  value="10"/>
        <beans:property name="unreturnedConnectionTimeout" value="500"/>
        <beans:property name="maxConnectionAge" value="120"/>
        <beans:property name="idleConnectionTestPeriod" value="10800"/>
        <beans:property name="maxIdleTime" value="21600"/>
        
    </beans:bean>
	
	
 
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
       
    </beans:bean>
	
	<beans:bean id="mapper" class="org.mybatis.spring.mapper.MapperFactoryBean" >
        <beans:property name="mapperInterface" value="com.ibm.app.services.parsistant.UserDataService" />
        <beans:property name="sqlSessionFactory" ref="sqlSessionFactory" />
    </beans:bean>
	
 	<beans:bean id="service" class="com.ibm.app.services.parsistantImpl.ServiceMy" />
  -->
  <beans:bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <beans:property name="driverClass" value="${jdbc.driverClassName}"/>
        <beans:property name="jdbcUrl" value="${jdbc.url}"/>  
        <beans:property name="user" value="${jdbc.username}"/>
        <beans:property name="password" value="${jdbc.password}"/> 
        <beans:property name="maxPoolSize" value="800"/>
        <beans:property name="initialPoolSize" value="50"/>
        <beans:property name="minPoolSize" value="1"/>
        <beans:property name="maxStatements" value="0"/>
        <beans:property name="acquireIncrement"  value="10"/>
        <beans:property name="idleConnectionTestPeriod" value="10800"/>
        <beans:property name="maxIdleTime" value="3600"/>        
        <beans:property name="numHelperThreads" value="10" />
    </beans:bean>
    
    <beans:bean id="dataSourceQuartz" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <beans:property name="driverClass" value="${jdbc.driverClassName}"/>
        <beans:property name="jdbcUrl" value="${quartz.jdbc.url}"/>  
        <beans:property name="user" value="${jdbc.username}"/>
        <beans:property name="password" value="${jdbc.password}"/> 
        <beans:property name="maxPoolSize" value="50"/>
        <beans:property name="initialPoolSize" value="5"/>
        <beans:property name="minPoolSize" value="1"/>
        <beans:property name="maxStatements" value="0"/>
        <beans:property name="acquireIncrement"  value="10"/>
        <beans:property name="idleConnectionTestPeriod" value="10800"/>
        <beans:property name="maxIdleTime" value="21600"/>        
        <beans:property name="numHelperThreads" value="10" />
    </beans:bean>
	
	<!-- *******************************
     ***** CACHE CONFIGURATION *****
     ******************************* -->       
     <cache:annotation-driven cache-manager="cacheManager" />         
	<beans:bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
	    <beans:property name="cacheManager" ref="ehcache"/>
	    
	</beans:bean>
	<beans:bean id="ehcache" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
	    <beans:property name="configLocation" value="classpath:resources/cacheConfig/Ehcache.xml"/>
	    <beans:property name="shared" value="true"/>
	</beans:bean>
	
	<!-- Enabling proxy based transaction -->
	
  <!-- enable the configuration of transactional behavior based on annotations -->
  <tx:annotation-driven transaction-manager="txManager"/>
 <!-- a PlatformTransactionManager is still required -->
  <beans:bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <!-- (this dependency is defined somewhere else) -->
    <beans:property name="dataSource" ref="dataSource"/>
  </beans:bean>
	
 
	<beans:bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <beans:property name="dataSource" ref="dataSource" />
        <beans:property name="configLocation" value="classpath:resources/mybatis/sqlmap-config.xml" />
    </beans:bean>
     <beans:bean id="janrainJDBCTemplate" class="com.ko.cds.dao.janrain.JanrainJDBCTemplate">
        <beans:property name="dataSource" ref="dataSource" />
    </beans:bean>
    <!-- scan for mappers and let them be autowired --> 

	 <beans:bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	 	<beans:property name="basePackage" value="com.ko.cds.dao,resources.mybatis" />
	 </beans:bean>
	<beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
		<beans:property name="mediaTypes">
	    	<beans:map>
	      		<beans:entry key="json" value="application/json"/>
	      		<beans:entry key="xml" value="application/xml"/>
	    	</beans:map>
	  	</beans:property>
	  	<beans:property name="viewResolvers">
	    	<beans:list>
	    		<beans:bean class="org.springframework.web.servlet.view.BeanNameViewResolver"/>
	    	</beans:list>
	  	</beans:property>
	  	<beans:property name="defaultViews">
	    	<beans:list>
	    		<beans:bean class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>
    			<beans:bean id="xmlViewer" class="org.springframework.web.servlet.view.xml.MarshallingView">
					<beans:constructor-arg>
				  	<beans:bean class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
						<beans:property name="classesToBeBound">
			            	<beans:list>
			                	<beans:value>com.ibm.app.services.xmlbinding.MemberInfo</beans:value> 
                            </beans:list>
		        		</beans:property>
				  	</beans:bean>
					</beans:constructor-arg>
				</beans:bean>
	    	</beans:list>
	  	</beans:property>
	</beans:bean>
	
	<aop:aspectj-autoproxy/>
	
</beans:beans>
